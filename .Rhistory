main="Apple Monthy Volatility"
,xlim = c(0.0,9.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,19.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
#yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
d <- density(summa$sd)
plot(d)
empirical_distribution <- summa$sd
cat('Mean Empirical probability: ',mean(empirical_distribution))
cat('Probability of high volatility on empirical data: ',mean(empirical_distribution>0.10))
dev.off()
#Fit diferent probability functions and find the best aproximations
fit_stat <-FitDistribution(X=empirical_distribution)
cat("KS-test Confidence - ",fit_stat[[3]])
fit_stat[[2]]
summa
colMeans(summa)
plot(d)
old_df <- read.csv(old_dat_file,header=TRUE)
old_df
old_df
old_dat_file <- "c:/data/Datasets/stockprices/AAPL.csv"
old_df <- read.csv(old_dat_file,header=TRUE)
old_dat_file <- "c:/data/Datasets/stockprices/AAPL.csv"
old_df <- read.csv(old_dat_file,header=TRUE)
old_dat_file <- "c:/data/Datasets/stockprices_dump/AAPL.csv"
old_df <- read.csv(old_dat_file,header=TRUE)
head(old_df)
head(data)
old_df[,c('Date','Open')]
old_df[,c('Date','Open')]
old_df[,c('Date','Open')]
old_df
names(old_df)
old_df[,c('timestamp','open','close')]
names(old_df)
names(old_df)
head(data)
old_df <- old_df[,c('timestamp','open','close','high','low')]
data <- data[,c('Date','Open','Close','High','Low')]
names(data) <- c('timestamp','open','close','high','low')
head(data)
head(old_df)
install.packages(plry)
install.packages(plyr)
install.packages('plyr')
data$timestamp
max(data$timestamp)
min(data$timestamp)
library(dplyr)
filter(data,timestamp>min(data$timestamp))
filter(data,timestamp>min(data$timestamp))
dat_to_conc <- filter(data,timestamp>min(data$timestamp))
filter(data,timestamp>max(old_df$timestamp))
old_df <- read.csv(old_dat_file,header=TRUE,stringsAsFactors = FALSE)
old_df <- old_df[,c('timestamp','open','close','high','low')]
data <- data[,c('Date','Open','Close','High','Low')]
names(data) <- c('timestamp','open','close','high','low')
dat_to_conc <- filter(data,timestamp>max(old_df$timestamp))
full_df <-rbind(old_df,dat_to_conc)
length(full_df)
full_df
min(full_df$timestamp)
max(full_df$timestamp)
head(full_df)
tail(full_df)
tail(old_df)
tail(dat_to_conc)
head(dat_to_conc)
dat_to_conc %>% summarise_all(func(n_distinct(.))
)
dat_to_conc %>% summarise_all(funs(n_distinct(.)))
unique(dat_to_conc$timestamp)
unique(full_df$timestamp)
unique(old_df$timestamp)
min(old_df$timestamp)
exit_file <- "c:/data/Datasets/stockprices/AAPL.csv"
write.csv(full_df,exit_file)
dat_file <- "c:/data/Datasets/stockprices/AAPL.csv"
rm(list=ls())
setwd('C:/pjt/QuantFin-Volatility')
library(dplyr)
source('DistributionFitting.R')
source('Model_Vola_Monthly.R')
dat_file <- "c:/data/Datasets/stockprices/AAPL.csv"
#Reading initial Data
dat = read.csv(dat_file,
header=TRUE)
fname= "png/EmpiricalDataPlot%03d.png"
png(filename = fname)
head(dat)
library(Quandl)
str(dat)
#Reading initial Data
dat = read.csv(dat_file,
header=TRUE,stringsAsFactors = FALSE)
fname= "png/EmpiricalDataPlot%03d.png"
png(filename = fname)
head(dat)
str(dat)
#Transform data. Grouping by month, calculating sd for monthly volatility
dat$day <-format(as.Date(dat$timestamp),'%d')
dat$month <- as.numeric(format(as.Date(dat$timestamp),'%m'))
dat$year <- as.numeric(format(as.Date(dat$timestamp),'%y')) *100
dat$monthyear <-dat$month + dat$year
dat$vola <- (dat$Close - dat$Open) /dat$Open
dat$vola <- (dat$close - dat$open) /dat$open
summa <-  dat %>%
group_by(monthyear) %>%
summarise(mean=mean(vola),sd=sd(vola))
head(dat)
summa
summa <-  dat %>%
group_by(monthyear) %>%
summarise(mean=mean(vola),sd=sd(vola))
#Plot a histogram of empirical volatility distribution
x <- summa$sd * 100
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,19.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
#yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
d <- density(summa$sd)
plot(d)
empirical_distribution <- summa$sd
cat('Mean Empirical probability: ',mean(empirical_distribution))
cat('Probability of high volatility on empirical data: ',mean(empirical_distribution>0.10))
dev.off()
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,19.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
#yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
max(x)
max(dat$vola)
plot(dat$vola)
plot(dat$vola)
#Plot a histogram of empirical volatility distribution
x <- summa$sd * 100
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,19.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
#yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
dev.off()
#Plot a histogram of empirical volatility distribution
x <- summa$sd * 100
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,19.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
d <- density(summa$sd)
plot(d)
summa <-  dat %>%
group_by(monthyear) %>%
summarise(mean=mean(vola),sd=sd(vola))
summa$sd
max(summa$sd)
sd(dat$vola)
max(dat$vola)
filter(dat,vola==max(vola))
head(dat)
head(dat,n = 100)
dat$vola <- abs((dat$close - dat$open) /dat$open)
summa <-  dat %>%
group_by(monthyear) %>%
summarise(mean=mean(vola),sd=sd(vola))
summa
summa$sd
max(summa$sd)
max(summa$mean)
summa <-  dat %>%
group_by(monthyear) %>%
summarise(mean=mean(vola),sd=sd(vola))
#Plot a histogram of empirical volatility distribution
x <- summa$sd * 100
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,19.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
#yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,19.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
#Plot a histogram of empirical volatility distribution
x <- summa$sd * 100
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,19.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,10.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,8.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,6.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
#yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
png(filename = fname)
#Plot a histogram of empirical volatility distribution
x <- summa$sd * 100
h<-hist(x, breaks=80, col="red", xlab="Volatility, %",
main="Apple Monthy Volatility"
,xlim = c(0.0,6.5)
#        ,ylim = c(0.0,200.0)
,freq = FALSE)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
#yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col="blue", lwd=2)
d <- density(summa$sd)
plot(d)
dev.off()
dev.off()
empirical_distribution <- summa$sd
cat('Mean Empirical probability: ',mean(empirical_distribution))
cat('Probability of high volatility on empirical data: ',mean(empirical_distribution>0.10))
dev.off()
#Fit diferent probability functions and find the best aproximations
fit_stat <-FitDistribution(X=empirical_distribution)
fit_stat[[2]]
fit_stat[[3]]
cat("KS-test Confidence - ",fit_stat[[3]])
aics<- data.frame(list('weibull' =fit_stat[[1]]$weibull$aic,
'gamma' =fit_stat[[1]]$gamma$aic,
'norm' =fit_stat[[1]]$norm$aic))
aics<- data.frame(list('weibull' =fit_stat[[1]]$weibull$aic,
'gamma' =fit_stat[[1]]$gamma$aic,
'norm' =fit_stat[[1]]$norm$aic)
aics
aics
source('DistributionFitting.R')
#Fit diferent probability functions and find the best aproximations
fit_stat <-FitDistribution(X=empirical_distribution)
aics<- data.frame(list('weibull' =fit_stat[[1]]$weibull$aic,
'gamma' =fit_stat[[1]]$gamma$aic,
'norm' =fit_stat[[1]]$norm$aic,
'lnorm' =fit_stat[[1]]$lnorm$aic))
(aics<- data.frame(list('weibull' =fit_stat[[1]]$weibull$aic,
'gamma' =fit_stat[[1]]$gamma$aic,
'norm' =fit_stat[[1]]$norm$aic,
'lnorm' =fit_stat[[1]]$lnorm$aic)))
(aics<- data.frame(list('weibull' =fit_stat[[1]]$weibull$aic,
'gamma' =fit_stat[[1]]$gamma$aic,
'norm' =fit_stat[[1]]$norm$aic,
'lnorm' =fit_stat[[1]]$lnorm$aic)))
cat("KS-test Confidence - ",fit_stat[[3]])
fit_stat[[1]]$lnorm$estimate
fit_stat[[1]]$gamma$estimate
#Creating the model
sim_to_test <- rep(40,8) / 2^(0:8)
sim_to_test
res <- data.frame('Sigma'=0
,'Mean Volatility'=0
,'Max Volatility'=0
,'High Volatility Probability'=0)
for(i in 1:length(sim_to_test)) {
#Sample MCMC model with defined paramethers
y_hat <-MVolaModel(X=summa$sd
,sig_sq = sim_to_test[i]
,n_samples=1e3
,alpha_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("shape")])
,beta_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("rate")])
)
#Collect statistics
res[i,] <-list(sim_to_test[i]
,mean(y_hat)
,max(y_hat)
,mean(y_hat>0.10))
}
res
res
mean(empirical_distribution)
for(i in 1:length(sim_to_test)) {
#Sample MCMC model with defined paramethers
y_hat <-MVolaModel(X=summa$sd
,sig_sq = sim_to_test[i]
,n_samples=1e3
,alpha_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("shape")])
,beta_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("rate")])
)
#Collect statistics
res[i,] <-list(sim_to_test[i]
,mean(y_hat)
,max(y_hat)
,mean(y_hat>mean(empirical_distribution)))
}
res
mean(empirical_distribution)
#Sample MCMC model with defined paramethers
y_hat <-MVolaModel(X=summa$sd
,sig_sq = sim_to_test[i]
,n_samples=1e3
,alpha_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("shape")])
,beta_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("rate")])
)
for(i in 1:length(sim_to_test)) {
#Sample MCMC model with defined paramethers
y_hat <-MVolaModel(X=summa$sd
,sig_sq = sim_to_test[i]
,n_samples=1e3
,alpha_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("shape")])
,beta_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("rate")])
)
#Collect statistics
res[i,] <-list(sim_to_test[i]
,mean(y_hat)
,max(y_hat)
,mean(y_hat>mean(empirical_distribution*2)))
}
res
#Creating the model
frm <- 40
steps <- 8
#Creating the model
frm <- 80
steps <- 10
sim_to_test <- rep(frm,steps) / 2^(0:steps)
res <- data.frame('Sigma'=0
,'Mean Volatility'=0
,'Max Volatility'=0
,'High Volatility Probability'=0)
sim_to_test
res <- data.frame('Sigma'=0
,'Mean Volatility'=0
,'Max Volatility'=0
,'High Volatility Probability'=0)
for(i in 1:length(sim_to_test)) {
#Sample MCMC model with defined paramethers
y_hat <-MVolaModel(X=summa$sd
,sig_sq = sim_to_test[i]
,n_samples=1e3
,alpha_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("shape")])
,beta_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("rate")])
)
#Collect statistics
res[i,] <-list(sim_to_test[i]
,mean(y_hat)
,max(y_hat)
,mean(y_hat>mean(empirical_distribution*2)))
}
res
summary(empirical_distribution)
summary(empirical_distribution)
mean(empirical_distribution> 2*mean(empirical_distribution))
for(i in 1:length(sim_to_test)) {
#Sample MCMC model with defined paramethers
y_hat <-MVolaModel(X=summa$sd
,sig_sq = sim_to_test[i]
,n_samples=1e3
,alpha_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("shape")])
,beta_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("rate")])
)
#Collect statistics
res[i,] <-list(sim_to_test[i]
,mean(y_hat)
,max(y_hat)
,mean(y_hat>mean(empirical_distribution*4)))
}
#Creating the model
frm <- 160
steps <- 15
sim_to_test <- rep(frm,steps) / 2^(0:steps)
frm <- 160
steps <- 15
res <- SearchSigma(frm,steps)
SearchSigma <- function(frm,steps) {
sim_to_test <- rep(frm,steps) / 2^(0:steps)
res <- data.frame('Sigma'=0
,'Mean Volatility'=0
,'Max Volatility'=0
,'High Volatility Probability'=0)
for(i in 1:length(sim_to_test)) {
#Sample MCMC model with defined paramethers
y_hat <-MVolaModel(X=summa$sd
,sig_sq = sim_to_test[i]
,n_samples=1e3
,alpha_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("shape")])
,beta_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("rate")])
)
#Collect statistics
res[i,] <-list(sim_to_test[i]
,mean(y_hat)
,max(y_hat)
,mean(y_hat>mean(empirical_distribution*4)))
}
return(res)
}
frm <- 160
steps <- 15
res <- SearchSigma(frm,steps)
res
res
summary(empirical_distribution)
mean(empirical_distribution> 2*mean(empirical_distribution))
summa
plot(summa$mean)
md <- density(summa$mean)
plot(md)
summa$sd
mean_dist <- density(select(filter(dat,monthyear==1),vola))
filter(dat,monthyear==1)
select(filter(dat,monthyear==1),vola
)
mean_dist <- density(select(filter(dat,monthyear==1),timestamp))
library(dplyr)
mean_dist <- density(select(filter(dat,monthyear==1),c(timestamp)))
mean_dist <- select(filter(dat,monthyear==1),c(timestamp))
filter(dat,monthyear==1)
select(filter(dat,monthyear==1))
mean_dist <- select(dat,monthyear==1)
mean_dist <- dat[which(monthyear==1),vola]
dat$vola <- abs((dat$close - dat$open) /dat$open)
mean_dist <- dat[which(monthyear==1),vola]
mean_dist <- dat[which(monthyear==1),c(vola)]
mean_dist <- dat[which(monthyear==1),c('vola')]
mean_dist <- dat[which('monthyear'==1),c('vola')]
mean_dist
mean_dist <- dat[which(dat$monthyear==1),c('vola')]
mean_dist
mean_dist <- density(dat[which(dat$monthyear==1),c('vola')])
plot(mean_dist)
mean_dist
plot
plot
plot(mean_dist)
d <- density(summa$sd)
d
mean_dist <- density(dat[which(dat$monthyear==1),c('vola')])
mean_dist
dplot(mean_dist)
dplot(mean_dist)
dplot(d)
plot(d)
dev.off()
md <- density(summa$md)
d <- density(summa$sd)
plot(d)
mean_dist <- density(dat[which(dat$monthyear==1),c('vola')])
plot(mean_dist)
png(filename = fname)
mean_dist <- density(dat[which(dat$monthyear==1),c('vola')])
plot(mean_dist)
dev.off()
frm <- 320
steps <- 20
res <- SearchSigma(frm,steps)
summary(empirical_distribution)
mean(empirical_distribution> 2*mean(empirical_distribution))
res
res
summary(empirical_distribution)
mean(empirical_distribution> 4*mean(empirical_distribution))
frm <- 320
steps <- 20
(res <- SearchSigma(frm,steps))
summary(empirical_distribution)
mean(empirical_distribution> 2*mean(empirical_distribution))
mean(empirical_distribution> 3*mean(empirical_distribution))
res
mean(empirical_distribution> 3*mean(empirical_distribution))
summary(empirical_distribution)
#get_sims
y_hat <-MVolaModel(X=summa$sd
,sig_sq = 4e1
,n_samples=1e5
,alpha_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("shape")])
,beta_prior = as.numeric(fit_stat[[1]]$gamma$estimate[c("rate")])
)
boxpot(y_hat,main="Simulations distribution")
boxplot(y_hat,main="Simulations distribution")
boxplot(y_hat,main="Simulations distribution")
boxplot(y_hat,main="Posterion Samples Distribution")
